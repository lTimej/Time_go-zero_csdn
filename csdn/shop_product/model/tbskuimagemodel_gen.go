// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbSkuImageFieldNames          = builder.RawFieldNames(&TbSkuImage{})
	tbSkuImageRows                = strings.Join(tbSkuImageFieldNames, ",")
	tbSkuImageRowsExpectAutoSet   = strings.Join(stringx.Remove(tbSkuImageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbSkuImageRowsWithPlaceHolder = strings.Join(stringx.Remove(tbSkuImageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbSkuImageIdPrefix = "cache:tbSkuImage:id:"
)

type (
	tbSkuImageModel interface {
		Insert(ctx context.Context, data *TbSkuImage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbSkuImage, error)
		Update(ctx context.Context, data *TbSkuImage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbSkuImageModel struct {
		sqlc.CachedConn
		table string
	}

	TbSkuImage struct {
		Id         int64          `db:"id"`
		SkuId      int64          `db:"sku_id"` // sku
		Image      sql.NullString `db:"image"`  // 图片
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
	}
)

func newTbSkuImageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbSkuImageModel {
	return &defaultTbSkuImageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_sku_image`",
	}
}

func (m *defaultTbSkuImageModel) Delete(ctx context.Context, id int64) error {
	tbSkuImageIdKey := fmt.Sprintf("%s%v", cacheTbSkuImageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbSkuImageIdKey)
	return err
}

func (m *defaultTbSkuImageModel) FindOne(ctx context.Context, id int64) (*TbSkuImage, error) {
	tbSkuImageIdKey := fmt.Sprintf("%s%v", cacheTbSkuImageIdPrefix, id)
	var resp TbSkuImage
	err := m.QueryRowCtx(ctx, &resp, tbSkuImageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSkuImageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbSkuImageModel) Insert(ctx context.Context, data *TbSkuImage) (sql.Result, error) {
	tbSkuImageIdKey := fmt.Sprintf("%s%v", cacheTbSkuImageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tbSkuImageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SkuId, data.Image)
	}, tbSkuImageIdKey)
	return ret, err
}

func (m *defaultTbSkuImageModel) Update(ctx context.Context, data *TbSkuImage) error {
	tbSkuImageIdKey := fmt.Sprintf("%s%v", cacheTbSkuImageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbSkuImageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SkuId, data.Image, data.Id)
	}, tbSkuImageIdKey)
	return err
}

func (m *defaultTbSkuImageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbSkuImageIdPrefix, primary)
}

func (m *defaultTbSkuImageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSkuImageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbSkuImageModel) tableName() string {
	return m.table
}
