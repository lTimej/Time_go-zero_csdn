// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbSpuDescFieldNames          = builder.RawFieldNames(&TbSpuDesc{})
	tbSpuDescRows                = strings.Join(tbSpuDescFieldNames, ",")
	tbSpuDescRowsExpectAutoSet   = strings.Join(stringx.Remove(tbSpuDescFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbSpuDescRowsWithPlaceHolder = strings.Join(stringx.Remove(tbSpuDescFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbSpuDescIdPrefix = "cache:tbSpuDesc:id:"
)

type (
	tbSpuDescModel interface {
		Insert(ctx context.Context, data *TbSpuDesc) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbSpuDesc, error)
		Update(ctx context.Context, data *TbSpuDesc) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbSpuDescModel struct {
		sqlc.CachedConn
		table string
	}

	TbSpuDesc struct {
		Id         int64          `db:"id"`
		SpuId      int64          `db:"spu_id"`      // 商品SPU
		DetailInfo sql.NullString `db:"detail_info"` // 商品详情
		DescImage  sql.NullString `db:"desc_image"`  // 图片
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
	}
)

func newTbSpuDescModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbSpuDescModel {
	return &defaultTbSpuDescModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_spu_desc`",
	}
}

func (m *defaultTbSpuDescModel) Delete(ctx context.Context, id int64) error {
	tbSpuDescIdKey := fmt.Sprintf("%s%v", cacheTbSpuDescIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbSpuDescIdKey)
	return err
}

func (m *defaultTbSpuDescModel) FindOne(ctx context.Context, id int64) (*TbSpuDesc, error) {
	tbSpuDescIdKey := fmt.Sprintf("%s%v", cacheTbSpuDescIdPrefix, id)
	var resp TbSpuDesc
	err := m.QueryRowCtx(ctx, &resp, tbSpuDescIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSpuDescRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbSpuDescModel) Insert(ctx context.Context, data *TbSpuDesc) (sql.Result, error) {
	tbSpuDescIdKey := fmt.Sprintf("%s%v", cacheTbSpuDescIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tbSpuDescRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SpuId, data.DetailInfo, data.DescImage)
	}, tbSpuDescIdKey)
	return ret, err
}

func (m *defaultTbSpuDescModel) Update(ctx context.Context, data *TbSpuDesc) error {
	tbSpuDescIdKey := fmt.Sprintf("%s%v", cacheTbSpuDescIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbSpuDescRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SpuId, data.DetailInfo, data.DescImage, data.Id)
	}, tbSpuDescIdKey)
	return err
}

func (m *defaultTbSpuDescModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbSpuDescIdPrefix, primary)
}

func (m *defaultTbSpuDescModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSpuDescRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbSpuDescModel) tableName() string {
	return m.table
}
