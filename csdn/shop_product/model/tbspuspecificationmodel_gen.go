// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbSpuSpecificationFieldNames          = builder.RawFieldNames(&TbSpuSpecification{})
	tbSpuSpecificationRows                = strings.Join(tbSpuSpecificationFieldNames, ",")
	tbSpuSpecificationRowsExpectAutoSet   = strings.Join(stringx.Remove(tbSpuSpecificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbSpuSpecificationRowsWithPlaceHolder = strings.Join(stringx.Remove(tbSpuSpecificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbSpuSpecificationIdPrefix = "cache:tbSpuSpecification:id:"
)

type (
	tbSpuSpecificationModel interface {
		Insert(ctx context.Context, data *TbSpuSpecification) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbSpuSpecification, error)
		Update(ctx context.Context, data *TbSpuSpecification) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbSpuSpecificationModel struct {
		sqlc.CachedConn
		table string
	}

	TbSpuSpecification struct {
		Id         int64          `db:"id"`
		SpuId      int64          `db:"spu_id"` // 商品spu
		Name       sql.NullString `db:"name"`   // 规格名称
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
	}
)

func newTbSpuSpecificationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbSpuSpecificationModel {
	return &defaultTbSpuSpecificationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_spu_specification`",
	}
}

func (m *defaultTbSpuSpecificationModel) Delete(ctx context.Context, id int64) error {
	tbSpuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSpuSpecificationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbSpuSpecificationIdKey)
	return err
}

func (m *defaultTbSpuSpecificationModel) FindOne(ctx context.Context, id int64) (*TbSpuSpecification, error) {
	tbSpuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSpuSpecificationIdPrefix, id)
	var resp TbSpuSpecification
	err := m.QueryRowCtx(ctx, &resp, tbSpuSpecificationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSpuSpecificationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbSpuSpecificationModel) Insert(ctx context.Context, data *TbSpuSpecification) (sql.Result, error) {
	tbSpuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSpuSpecificationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tbSpuSpecificationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SpuId, data.Name)
	}, tbSpuSpecificationIdKey)
	return ret, err
}

func (m *defaultTbSpuSpecificationModel) Update(ctx context.Context, data *TbSpuSpecification) error {
	tbSpuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSpuSpecificationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbSpuSpecificationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SpuId, data.Name, data.Id)
	}, tbSpuSpecificationIdKey)
	return err
}

func (m *defaultTbSpuSpecificationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbSpuSpecificationIdPrefix, primary)
}

func (m *defaultTbSpuSpecificationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSpuSpecificationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbSpuSpecificationModel) tableName() string {
	return m.table
}
