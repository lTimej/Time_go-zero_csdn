// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbProductIdFieldNames          = builder.RawFieldNames(&TbProductId{})
	tbProductIdRows                = strings.Join(tbProductIdFieldNames, ",")
	tbProductIdRowsExpectAutoSet   = strings.Join(stringx.Remove(tbProductIdFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbProductIdRowsWithPlaceHolder = strings.Join(stringx.Remove(tbProductIdFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbProductIdIdPrefix = "cache:tbProductId:id:"
)

type (
	tbProductIdModel interface {
		Insert(ctx context.Context, data *TbProductId) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbProductId, error)
		Update(ctx context.Context, data *TbProductId) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbProductIdModel struct {
		sqlc.CachedConn
		table string
	}

	TbProductId struct {
		Id         int64          `db:"id"`
		Pid        sql.NullString `db:"pid"` // 商品编号
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
	}
)

func newTbProductIdModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbProductIdModel {
	return &defaultTbProductIdModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_product_id`",
	}
}

func (m *defaultTbProductIdModel) Delete(ctx context.Context, id int64) error {
	tbProductIdIdKey := fmt.Sprintf("%s%v", cacheTbProductIdIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbProductIdIdKey)
	return err
}

func (m *defaultTbProductIdModel) FindOne(ctx context.Context, id int64) (*TbProductId, error) {
	tbProductIdIdKey := fmt.Sprintf("%s%v", cacheTbProductIdIdPrefix, id)
	var resp TbProductId
	err := m.QueryRowCtx(ctx, &resp, tbProductIdIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbProductIdRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbProductIdModel) Insert(ctx context.Context, data *TbProductId) (sql.Result, error) {
	tbProductIdIdKey := fmt.Sprintf("%s%v", cacheTbProductIdIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, tbProductIdRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Pid)
	}, tbProductIdIdKey)
	return ret, err
}

func (m *defaultTbProductIdModel) Update(ctx context.Context, data *TbProductId) error {
	tbProductIdIdKey := fmt.Sprintf("%s%v", cacheTbProductIdIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbProductIdRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Pid, data.Id)
	}, tbProductIdIdKey)
	return err
}

func (m *defaultTbProductIdModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbProductIdIdPrefix, primary)
}

func (m *defaultTbProductIdModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbProductIdRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbProductIdModel) tableName() string {
	return m.table
}
