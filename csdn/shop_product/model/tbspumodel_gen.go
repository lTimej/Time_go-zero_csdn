// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbSpuFieldNames          = builder.RawFieldNames(&TbSpu{})
	tbSpuRows                = strings.Join(tbSpuFieldNames, ",")
	tbSpuRowsExpectAutoSet   = strings.Join(stringx.Remove(tbSpuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbSpuRowsWithPlaceHolder = strings.Join(stringx.Remove(tbSpuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbSpuIdPrefix = "cache:tbSpu:id:"
)

type (
	tbSpuModel interface {
		Builder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *TbSpu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbSpu, error)
		FindAllByCategoryId(ctx context.Context, builder squirrel.SelectBuilder) ([]*SpuInfo, error)
		Update(ctx context.Context, data *TbSpu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbSpuModel struct {
		sqlc.CachedConn
		table string
	}

	TbSpu struct {
		Id          int64     `db:"id"`
		Name        string    `db:"name"`         // 名称
		Category1Id int64     `db:"category1_id"` // 一级类别
		Category2Id int64     `db:"category2_id"` // 二级类别
		Sales       int64     `db:"sales"`        // 销量
		Cfavs       int64     `db:"cfavs"`        // 收藏数
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
	SpuInfo struct {
		Id           int64   `db:"id"`
		Name         string  `db:"name"`  // 名称
		Sales        int64   `db:"sales"` // 销量
		Cfavs        int64   `db:"cfavs"` // 收藏数
		DefaultImage string  `db:"default_image"`
		Price        float32 `db:"price"`
		NowPrice     float32 `db:"now_price"`
	}
)

func newTbSpuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbSpuModel {
	return &defaultTbSpuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_spu`",
	}
}

func (m *defaultTbSpuModel) Delete(ctx context.Context, id int64) error {
	tbSpuIdKey := fmt.Sprintf("%s%v", cacheTbSpuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbSpuIdKey)
	return err
}

func (m *defaultTbSpuModel) FindOne(ctx context.Context, id int64) (*TbSpu, error) {
	tbSpuIdKey := fmt.Sprintf("%s%v", cacheTbSpuIdPrefix, id)
	var resp TbSpu
	err := m.QueryRowCtx(ctx, &resp, tbSpuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSpuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbSpuModel) FindAllByCategoryId(ctx context.Context, builder squirrel.SelectBuilder) ([]*SpuInfo, error) {
	query, values, err := builder.Join("tb_sku on tb_spu.id=tb_sku.spu_id").Limit(20).ToSql()
	fmt.Println(query)
	if err != nil {
		return nil, err
	}
	var resp []*SpuInfo
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultTbSpuModel) Insert(ctx context.Context, data *TbSpu) (sql.Result, error) {
	tbSpuIdKey := fmt.Sprintf("%s%v", cacheTbSpuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tbSpuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Category1Id, data.Category2Id, data.Sales, data.Cfavs)
	}, tbSpuIdKey)
	return ret, err
}

func (m *defaultTbSpuModel) Update(ctx context.Context, data *TbSpu) error {
	tbSpuIdKey := fmt.Sprintf("%s%v", cacheTbSpuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbSpuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Category1Id, data.Category2Id, data.Sales, data.Cfavs, data.Id)
	}, tbSpuIdKey)
	return err
}

func (m *defaultTbSpuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbSpuIdPrefix, primary)
}

func (m *defaultTbSpuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSpuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbSpuModel) tableName() string {
	return m.table
}

func (m *defaultTbSpuModel) Builder() squirrel.SelectBuilder {
	return squirrel.Select("tb_spu.id,tb_spu.name,tb_spu.sales,tb_spu.cfavs,tb_sku.default_image,tb_sku.price,tb_sku.now_price").From(m.table)
}
