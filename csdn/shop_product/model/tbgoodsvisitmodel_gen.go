// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbGoodsVisitFieldNames          = builder.RawFieldNames(&TbGoodsVisit{})
	tbGoodsVisitRows                = strings.Join(tbGoodsVisitFieldNames, ",")
	tbGoodsVisitRowsExpectAutoSet   = strings.Join(stringx.Remove(tbGoodsVisitFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbGoodsVisitRowsWithPlaceHolder = strings.Join(stringx.Remove(tbGoodsVisitFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbGoodsVisitIdPrefix = "cache:tbGoodsVisit:id:"
)

type (
	tbGoodsVisitModel interface {
		Insert(ctx context.Context, data *TbGoodsVisit) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbGoodsVisit, error)
		Update(ctx context.Context, data *TbGoodsVisit) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbGoodsVisitModel struct {
		sqlc.CachedConn
		table string
	}

	TbGoodsVisit struct {
		Id         int64         `db:"id"`
		CategoryId int64         `db:"category_id"` // 商品分类
		Count      sql.NullInt64 `db:"count"`       // 访问量
		Date       time.Time     `db:"date"`        // 统计日期
		CreateTime time.Time     `db:"create_time"`
		UpdateTime time.Time     `db:"update_time"`
	}
)

func newTbGoodsVisitModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbGoodsVisitModel {
	return &defaultTbGoodsVisitModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_goods_visit`",
	}
}

func (m *defaultTbGoodsVisitModel) Delete(ctx context.Context, id int64) error {
	tbGoodsVisitIdKey := fmt.Sprintf("%s%v", cacheTbGoodsVisitIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbGoodsVisitIdKey)
	return err
}

func (m *defaultTbGoodsVisitModel) FindOne(ctx context.Context, id int64) (*TbGoodsVisit, error) {
	tbGoodsVisitIdKey := fmt.Sprintf("%s%v", cacheTbGoodsVisitIdPrefix, id)
	var resp TbGoodsVisit
	err := m.QueryRowCtx(ctx, &resp, tbGoodsVisitIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbGoodsVisitRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbGoodsVisitModel) Insert(ctx context.Context, data *TbGoodsVisit) (sql.Result, error) {
	tbGoodsVisitIdKey := fmt.Sprintf("%s%v", cacheTbGoodsVisitIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tbGoodsVisitRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CategoryId, data.Count, data.Date)
	}, tbGoodsVisitIdKey)
	return ret, err
}

func (m *defaultTbGoodsVisitModel) Update(ctx context.Context, data *TbGoodsVisit) error {
	tbGoodsVisitIdKey := fmt.Sprintf("%s%v", cacheTbGoodsVisitIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbGoodsVisitRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CategoryId, data.Count, data.Date, data.Id)
	}, tbGoodsVisitIdKey)
	return err
}

func (m *defaultTbGoodsVisitModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbGoodsVisitIdPrefix, primary)
}

func (m *defaultTbGoodsVisitModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbGoodsVisitRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbGoodsVisitModel) tableName() string {
	return m.table
}
