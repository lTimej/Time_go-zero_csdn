// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbGoodsListFieldNames          = builder.RawFieldNames(&TbGoodsList{})
	tbGoodsListRows                = strings.Join(tbGoodsListFieldNames, ",")
	tbGoodsListRowsExpectAutoSet   = strings.Join(stringx.Remove(tbGoodsListFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbGoodsListRowsWithPlaceHolder = strings.Join(stringx.Remove(tbGoodsListFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbGoodsListIdPrefix = "cache:tbGoodsList:id:"
)

type (
	tbGoodsListModel interface {
		Insert(ctx context.Context, data *TbGoodsList) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbGoodsList, error)
		Update(ctx context.Context, data *TbGoodsList) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbGoodsListModel struct {
		sqlc.CachedConn
		table string
	}

	TbGoodsList struct {
		Id         int64          `db:"id"`
		PidId      int64          `db:"pid_id"`      // 商品pid
		CategoryId int64          `db:"category_id"` // 商品类别
		Url        sql.NullString `db:"url"`         // 商品url
		Sequeue    sql.NullInt64  `db:"sequeue"`     // 顺序
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
	}
)

func newTbGoodsListModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbGoodsListModel {
	return &defaultTbGoodsListModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_goods_list`",
	}
}

func (m *defaultTbGoodsListModel) Delete(ctx context.Context, id int64) error {
	tbGoodsListIdKey := fmt.Sprintf("%s%v", cacheTbGoodsListIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbGoodsListIdKey)
	return err
}

func (m *defaultTbGoodsListModel) FindOne(ctx context.Context, id int64) (*TbGoodsList, error) {
	tbGoodsListIdKey := fmt.Sprintf("%s%v", cacheTbGoodsListIdPrefix, id)
	var resp TbGoodsList
	err := m.QueryRowCtx(ctx, &resp, tbGoodsListIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbGoodsListRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbGoodsListModel) Insert(ctx context.Context, data *TbGoodsList) (sql.Result, error) {
	tbGoodsListIdKey := fmt.Sprintf("%s%v", cacheTbGoodsListIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tbGoodsListRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PidId, data.CategoryId, data.Url, data.Sequeue)
	}, tbGoodsListIdKey)
	return ret, err
}

func (m *defaultTbGoodsListModel) Update(ctx context.Context, data *TbGoodsList) error {
	tbGoodsListIdKey := fmt.Sprintf("%s%v", cacheTbGoodsListIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbGoodsListRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PidId, data.CategoryId, data.Url, data.Sequeue, data.Id)
	}, tbGoodsListIdKey)
	return err
}

func (m *defaultTbGoodsListModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbGoodsListIdPrefix, primary)
}

func (m *defaultTbGoodsListModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbGoodsListRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbGoodsListModel) tableName() string {
	return m.table
}
