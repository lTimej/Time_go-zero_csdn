// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbContentFieldNames          = builder.RawFieldNames(&TbContent{})
	tbContentRows                = strings.Join(tbContentFieldNames, ",")
	tbContentRowsExpectAutoSet   = strings.Join(stringx.Remove(tbContentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbContentRowsWithPlaceHolder = strings.Join(stringx.Remove(tbContentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbContentIdPrefix = "cache:tbContent:id:"
)

type (
	tbContentModel interface {
		Insert(ctx context.Context, data *TbContent) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbContent, error)
		Update(ctx context.Context, data *TbContent) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbContentModel struct {
		sqlc.CachedConn
		table string
	}

	TbContent struct {
		Id            int64           `db:"id"`
		Cid           sql.NullString  `db:"cid"`         // 内容id
		CategoryId    int64           `db:"category_id"` // 广告类别
		Title         sql.NullString  `db:"title"`       // 标题
		Url           sql.NullString  `db:"url"`         // 内容链接
		Image         sql.NullString  `db:"image"`       // 图片
		Text          sql.NullString  `db:"text"`        // 内容
		CreateTime    time.Time       `db:"create_time"`
		UpdateTime    time.Time       `db:"update_time"`
		Price         sql.NullFloat64 `db:"price"`         // 价格
		Discountprice sql.NullFloat64 `db:"discountprice"` // 折后价格
		Sequence      sql.NullInt64   `db:"sequence"`      // 排序
		Status        int64           `db:"status"`        // 是否展示
	}
)

func newTbContentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbContentModel {
	return &defaultTbContentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_content`",
	}
}

func (m *defaultTbContentModel) Delete(ctx context.Context, id int64) error {
	tbContentIdKey := fmt.Sprintf("%s%v", cacheTbContentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbContentIdKey)
	return err
}

func (m *defaultTbContentModel) FindOne(ctx context.Context, id int64) (*TbContent, error) {
	tbContentIdKey := fmt.Sprintf("%s%v", cacheTbContentIdPrefix, id)
	var resp TbContent
	err := m.QueryRowCtx(ctx, &resp, tbContentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbContentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbContentModel) Insert(ctx context.Context, data *TbContent) (sql.Result, error) {
	tbContentIdKey := fmt.Sprintf("%s%v", cacheTbContentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tbContentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Cid, data.CategoryId, data.Title, data.Url, data.Image, data.Text, data.Price, data.Discountprice, data.Sequence, data.Status)
	}, tbContentIdKey)
	return ret, err
}

func (m *defaultTbContentModel) Update(ctx context.Context, data *TbContent) error {
	tbContentIdKey := fmt.Sprintf("%s%v", cacheTbContentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbContentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Cid, data.CategoryId, data.Title, data.Url, data.Image, data.Text, data.Price, data.Discountprice, data.Sequence, data.Status, data.Id)
	}, tbContentIdKey)
	return err
}

func (m *defaultTbContentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbContentIdPrefix, primary)
}

func (m *defaultTbContentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbContentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbContentModel) tableName() string {
	return m.table
}
