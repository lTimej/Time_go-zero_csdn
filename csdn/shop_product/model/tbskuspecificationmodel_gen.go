// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbSkuSpecificationFieldNames          = builder.RawFieldNames(&TbSkuSpecification{})
	tbSkuSpecificationRows                = strings.Join(tbSkuSpecificationFieldNames, ",")
	tbSkuSpecificationRowsExpectAutoSet   = strings.Join(stringx.Remove(tbSkuSpecificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbSkuSpecificationRowsWithPlaceHolder = strings.Join(stringx.Remove(tbSkuSpecificationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbSkuSpecificationIdPrefix = "cache:tbSkuSpecification:id:"
)

type (
	tbSkuSpecificationModel interface {
		Insert(ctx context.Context, data *TbSkuSpecification) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbSkuSpecification, error)
		Update(ctx context.Context, data *TbSkuSpecification) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbSkuSpecificationModel struct {
		sqlc.CachedConn
		table string
	}

	TbSkuSpecification struct {
		Id         int64     `db:"id"`
		SkuId      int64     `db:"sku_id"`    // sku
		SpecId     int64     `db:"spec_id"`   // 规格名称
		OptionId   int64     `db:"option_id"` // 规格值
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newTbSkuSpecificationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbSkuSpecificationModel {
	return &defaultTbSkuSpecificationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_sku_specification`",
	}
}

func (m *defaultTbSkuSpecificationModel) Delete(ctx context.Context, id int64) error {
	tbSkuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSkuSpecificationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbSkuSpecificationIdKey)
	return err
}

func (m *defaultTbSkuSpecificationModel) FindOne(ctx context.Context, id int64) (*TbSkuSpecification, error) {
	tbSkuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSkuSpecificationIdPrefix, id)
	var resp TbSkuSpecification
	err := m.QueryRowCtx(ctx, &resp, tbSkuSpecificationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSkuSpecificationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbSkuSpecificationModel) Insert(ctx context.Context, data *TbSkuSpecification) (sql.Result, error) {
	tbSkuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSkuSpecificationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tbSkuSpecificationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SkuId, data.SpecId, data.OptionId)
	}, tbSkuSpecificationIdKey)
	return ret, err
}

func (m *defaultTbSkuSpecificationModel) Update(ctx context.Context, data *TbSkuSpecification) error {
	tbSkuSpecificationIdKey := fmt.Sprintf("%s%v", cacheTbSkuSpecificationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbSkuSpecificationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SkuId, data.SpecId, data.OptionId, data.Id)
	}, tbSkuSpecificationIdKey)
	return err
}

func (m *defaultTbSkuSpecificationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbSkuSpecificationIdPrefix, primary)
}

func (m *defaultTbSkuSpecificationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbSkuSpecificationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbSkuSpecificationModel) tableName() string {
	return m.table
}
