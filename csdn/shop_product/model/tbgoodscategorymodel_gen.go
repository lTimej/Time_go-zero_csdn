// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbGoodsCategoryFieldNames          = builder.RawFieldNames(&TbGoodsCategory{})
	tbGoodsCategoryRows                = strings.Join(tbGoodsCategoryFieldNames, ",")
	tbGoodsCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(tbGoodsCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbGoodsCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(tbGoodsCategoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTbGoodsCategoryIdPrefix = "cache:tbGoodsCategory:id:"
)

type (
	tbGoodsCategoryModel interface {
		Builder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *TbGoodsCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TbGoodsCategory, error)
		FindAllByParent(ctx context.Context, builder squirrel.SelectBuilder, parent_id int64) ([]*GoodsCategory, error)
		Update(ctx context.Context, data *TbGoodsCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTbGoodsCategoryModel struct {
		sqlc.CachedConn
		table string
	}

	TbGoodsCategory struct {
		Id         int64         `db:"id"`
		Name       string        `db:"name"`      // 类名
		ParentId   sql.NullInt64 `db:"parent_id"` // 目录
		CreateTime time.Time     `db:"create_time"`
		UpdateTime time.Time     `db:"update_time"`
	}
	GoodsCategory struct {
		Id   int64  `db:"id"`
		Name string `db:"name"` // 类名
		// ParentId int64  `db:"parent_id"` // 目录
	}
)

func newTbGoodsCategoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbGoodsCategoryModel {
	return &defaultTbGoodsCategoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tb_goods_category`",
	}
}

func (m *defaultTbGoodsCategoryModel) Delete(ctx context.Context, id int64) error {
	tbGoodsCategoryIdKey := fmt.Sprintf("%s%v", cacheTbGoodsCategoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tbGoodsCategoryIdKey)
	return err
}

func (m *defaultTbGoodsCategoryModel) FindOne(ctx context.Context, id int64) (*TbGoodsCategory, error) {
	tbGoodsCategoryIdKey := fmt.Sprintf("%s%v", cacheTbGoodsCategoryIdPrefix, id)
	var resp TbGoodsCategory
	err := m.QueryRowCtx(ctx, &resp, tbGoodsCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbGoodsCategoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbGoodsCategoryModel) FindAllByParent(ctx context.Context, builder squirrel.SelectBuilder, parent_id int64) ([]*GoodsCategory, error) {
	// var parent string
	var query string
	var values []interface{}
	var err error
	if parent_id == 0 {
		query, values, err = builder.Where("parent_id is NULL").ToSql()
	} else {
		query, values, err = builder.Where("parent_id = ?", parent_id).ToSql()
	}
	if err != nil {
		return nil, err
	}

	var resp []*GoodsCategory
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultTbGoodsCategoryModel) Insert(ctx context.Context, data *TbGoodsCategory) (sql.Result, error) {
	tbGoodsCategoryIdKey := fmt.Sprintf("%s%v", cacheTbGoodsCategoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tbGoodsCategoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId)
	}, tbGoodsCategoryIdKey)
	return ret, err
}

func (m *defaultTbGoodsCategoryModel) Update(ctx context.Context, data *TbGoodsCategory) error {
	tbGoodsCategoryIdKey := fmt.Sprintf("%s%v", cacheTbGoodsCategoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tbGoodsCategoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Id)
	}, tbGoodsCategoryIdKey)
	return err
}

func (m *defaultTbGoodsCategoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbGoodsCategoryIdPrefix, primary)
}

func (m *defaultTbGoodsCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tbGoodsCategoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbGoodsCategoryModel) tableName() string {
	return m.table
}

func (m *defaultTbGoodsCategoryModel) Builder() squirrel.SelectBuilder {
	return squirrel.Select("id,name").From(m.table)
}
