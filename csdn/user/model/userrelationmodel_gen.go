// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"liujun/Time_go-zero_csdn/common/globalkey"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRelationFieldNames          = builder.RawFieldNames(&UserRelation{})
	userRelationRows                = strings.Join(userRelationFieldNames, ",")
	userRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(userRelationFieldNames, "`relation_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(userRelationFieldNames, "`relation_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserRelationRelationIdPrefix         = "cache:userRelation:relationId:"
	cacheUserRelationUserIdTargetUserIdPrefix = "cache:userRelation:userId:targetUserId:"
)

type (
	userRelationModel interface {
		RowBuilder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *UserRelation) (sql.Result, error)
		FindOne(ctx context.Context, relationId int64) (*UserRelation, error)
		FindFocusByUserId(ctx context.Context, builder squirrel.SelectBuilder, userId string) ([]*FocusList, error)
		FindFansByUserId(ctx context.Context, builder squirrel.SelectBuilder, userId string) ([]*FocusList, error)
		FindByUserIdTargetUserId(ctx context.Context, userId string, targetUserId string) (*UserRelation, error)
		Update(ctx context.Context, data *UserRelation) error
		Delete(ctx context.Context, relationId int64) error
	}

	defaultUserRelationModel struct {
		sqlc.CachedConn
		table string
	}
	FocusList struct {
		TargetUserId string    `db:"target_user_id"` // 目标用户ID
		CreateTime   time.Time `db:"create_time"`
	}
	UserRelation struct {
		RelationId   int64     `db:"relation_id"`    // 主键id
		UserId       string    `db:"user_id"`        // 用户ID
		TargetUserId string    `db:"target_user_id"` // 目标用户ID
		Relation     int64     `db:"relation"`       // 关系，0-取消，1-关注，2-拉黑
		CreateTime   time.Time `db:"create_time"`    // 创建时间
		UpdateTime   time.Time `db:"update_time"`    // 更新时间
	}
)

func RELATION() Relation {
	return Relation{
		DELETE:    0,
		FOLLOW:    1,
		BLACKLIST: 2,
	}
}

func newUserRelationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserRelationModel {
	return &defaultUserRelationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_relation`",
	}
}

func (m *defaultUserRelationModel) Delete(ctx context.Context, relationId int64) error {
	data, err := m.FindOne(ctx, relationId)
	if err != nil {
		return err
	}

	userRelationRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationRelationIdPrefix, relationId)
	userRelationUserIdTargetUserIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationUserIdTargetUserIdPrefix, data.UserId, data.TargetUserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `relation_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, relationId)
	}, userRelationRelationIdKey, userRelationUserIdTargetUserIdKey)
	return err
}

func (m *defaultUserRelationModel) FindOne(ctx context.Context, relationId int64) (*UserRelation, error) {
	userRelationRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationRelationIdPrefix, relationId)
	var resp UserRelation
	err := m.QueryRowCtx(ctx, &resp, userRelationRelationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `relation_id` = ? limit 1", userRelationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, relationId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindFocusByUserId(ctx context.Context, builder squirrel.SelectBuilder, userId string) ([]*FocusList, error) {
	builder = builder.OrderBy("create_time DESC")

	query, values, err := builder.Where("user_id = ?", userId).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*FocusList
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sql.ErrNoRows:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindFansByUserId(ctx context.Context, builder squirrel.SelectBuilder, userId string) ([]*FocusList, error) {
	builder = builder.OrderBy("create_time DESC")

	query, values, err := builder.Where("target_user_id = ?", userId).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*FocusList
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sql.ErrNoRows:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) FindByUserIdTargetUserId(ctx context.Context, userId string, targetUserId string) (*UserRelation, error) {
	userRelationUserIdTargetUserIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationUserIdTargetUserIdPrefix, userId, targetUserId)
	var resp UserRelation
	err := m.QueryRowIndexCtx(ctx, &resp, userRelationUserIdTargetUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `target_user_id` = ? limit 1", userRelationRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, targetUserId); err != nil {
			return nil, err
		}
		return resp.RelationId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRelationModel) Insert(ctx context.Context, data *UserRelation) (sql.Result, error) {
	userRelationRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationRelationIdPrefix, data.RelationId)
	userRelationUserIdTargetUserIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationUserIdTargetUserIdPrefix, data.UserId, data.TargetUserId)
	userFocusByUserIdKey := fmt.Sprintf(globalkey.UserFocusByUserId, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userRelationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.TargetUserId, data.Relation)
	}, userRelationRelationIdKey, userRelationUserIdTargetUserIdKey, userFocusByUserIdKey)
	return ret, err
}

func (m *defaultUserRelationModel) Update(ctx context.Context, newData *UserRelation) error {
	userRelationRelationIdKey := fmt.Sprintf("%s%v", cacheUserRelationRelationIdPrefix, newData.RelationId)
	userRelationUserIdTargetUserIdKey := fmt.Sprintf("%s%v:%v", cacheUserRelationUserIdTargetUserIdPrefix, newData.UserId, newData.TargetUserId)
	userFocusByUserIdKey := fmt.Sprintf(globalkey.UserFocusByUserId, newData.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set relation = ? where `relation_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, newData.Relation, newData.RelationId)
	}, userRelationRelationIdKey, userRelationUserIdTargetUserIdKey, userFocusByUserIdKey)
	return err
}

func (m *defaultUserRelationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserRelationRelationIdPrefix, primary)
}

func (m *defaultUserRelationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `relation_id` = ? limit 1", userRelationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserRelationModel) tableName() string {
	return m.table
}

func (m *defaultUserRelationModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select("target_user_id", "create_time").From(m.table)
}
