// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	addressFieldNames          = builder.RawFieldNames(&Address{})
	addressRows                = strings.Join(addressFieldNames, ",")
	addressRowsExpectAutoSet   = strings.Join(stringx.Remove(addressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	addressRowsWithPlaceHolder = strings.Join(stringx.Remove(addressFieldNames, "`id`", "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
	addressRowsWithPlace       = strings.Join(stringx.Remove(addressFieldNames, "`id`", "`is_deleted`", "`title`", "`tel`", "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
	cacheAddressIdPrefix       = "cache:address:id:"
)

type (
	addressModel interface {
		AddressBuilder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *Address) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Address, error)
		FindAllByUserId(ctx context.Context, builder squirrel.SelectBuilder, user_id string) ([]*UserAddress, error)
		FindOneByAddressId(ctx context.Context, builder squirrel.SelectBuilder, address_id int64) (*UserAddress, error)
		Update(ctx context.Context, data *Address) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAddressModel struct {
		sqlc.CachedConn
		table string
	}

	Address struct {
		Id         int64  `db:"id"`
		UserId     string `db:"user_id"`     // 用户id
		Title      string `db:"title"`       // 地址名称
		Receiver   string `db:"receiver"`    // 收货人
		ProvinceId int64  `db:"province_id"` // 省
		CityId     int64  `db:"city_id"`     // 市
		DistrictId int64  `db:"district_id"` // 区/县
		Place      string `db:"place"`       // 地址
		Mobile     string `db:"mobile"`      // 手机
		Tel        string `db:"tel"`         // 固定电话
		Email      string `db:"email"`       // 电子邮箱
		IsDefault  int64  `db:"is_default"`  //默认地址
		IsDeleted  int64  `db:"is_deleted"`  // 逻辑删除
	}
	UserAddress struct {
		AddressId  int64  `db:"address_id"`
		Receiver   string `db:"receiver"`
		Mobile     string `db:"mobile"`
		ProvinceId int64  `db:"province_id"`
		CityId     int64  `db:"city_id"`
		DistrictId int64  `db:"district_id"`
		Province   string `db:"province"`
		City       string `db:"city"`
		District   string `db:"district"`
		Place      string `db:"place"`
		IsDefault  int64  `db:"is_default"`
		Email      string `db:"email"`
	}
)

func newAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAddressModel {
	return &defaultAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`address`",
	}
}

func (m *defaultAddressModel) Delete(ctx context.Context, id int64) error {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, addressIdKey)
	return err
}

func (m *defaultAddressModel) FindOne(ctx context.Context, id int64) (*Address, error) {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, id)
	var resp Address
	err := m.QueryRowCtx(ctx, &resp, addressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAddressModel) FindAllByUserId(ctx context.Context, builder squirrel.SelectBuilder, user_id string) ([]*UserAddress, error) {

	query, values, err := builder.Join("city as c1,city as c2,city as c3 where address.province_id=c1.id and address.city_id=c2.id and address.district_id=c3.id").ToSql()
	query = fmt.Sprintf("%s and address.user_id = %s order by is_default desc,address_id desc", query, user_id)
	fmt.Println(query, "**********111111111111111**********")
	if err != nil {
		return nil, err
	}
	var resp []*UserAddress
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultAddressModel) FindOneByAddressId(ctx context.Context, builder squirrel.SelectBuilder, address_id int64) (*UserAddress, error) {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, address_id)
	var resp UserAddress
	err := m.QueryRowCtx(ctx, &resp, addressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query, _, _ := builder.Join("city as c1,city as c2,city as c3 where address.province_id=c1.id and address.city_id=c2.id and address.district_id=c3.id").ToSql()
		// query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// func (m *defaultAddressModel) FindOneByAddressId(ctx context.Context, builder squirrel.SelectBuilder, address_id int64) (*UserAddress, error) {

// 	query, values, err := builder.Join("city as c1,city as c2,city as c3 where address.province_id=c1.id and address.city_id=c2.id and address.district_id=c3.id").ToSql()
// 	query = fmt.Sprintf("%s and address.id = %d", query, address_id)
// 	fmt.Println(query, "**********111111111111111**********")
// 	if err != nil {
// 		return nil, err
// 	}
// 	var resp *UserAddress
// 	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
// 	switch err {
// 	case nil:
// 		return resp, nil
// 	default:
// 		return nil, err
// 	}
// }

func (m *defaultAddressModel) Insert(ctx context.Context, data *Address) (sql.Result, error) {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?)", m.table, addressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Title, data.Receiver, data.ProvinceId, data.CityId, data.DistrictId, data.Place, data.Mobile, data.Tel, data.Email, data.IsDefault, data.IsDeleted)
	}, addressIdKey)
	return ret, err
}

func (m *defaultAddressModel) Update(ctx context.Context, data *Address) error {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		var query string
		if data.IsDefault == 1 {
			query = fmt.Sprintf("update %s set is_default=0 where is_default = 1", m.table)
			conn.ExecCtx(ctx, query)
		}
		query = fmt.Sprintf("update %s set %s where `id` = ?", m.table, addressRowsWithPlace)
		return conn.ExecCtx(ctx, query, data.Receiver, data.ProvinceId, data.CityId, data.DistrictId, data.Place, data.Mobile, data.Email, data.IsDefault, data.Id)
	}, addressIdKey)
	return err
}

func (m *defaultAddressModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAddressIdPrefix, primary)
}

func (m *defaultAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAddressModel) tableName() string {
	return m.table
}

func (m *defaultAddressModel) AddressBuilder() squirrel.SelectBuilder {
	return squirrel.Select("address.place,address.is_default,address.email,address.id as address_id,c1.name as province,c2.name as city,c3.name as district,address.receiver,address.province_id,address.city_id,address.district_id, address.mobile").From(m.table)
}
