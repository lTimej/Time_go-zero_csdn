// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	addressFieldNames          = builder.RawFieldNames(&Address{})
	addressRows                = strings.Join(addressFieldNames, ",")
	addressRowsExpectAutoSet   = strings.Join(stringx.Remove(addressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	addressRowsWithPlaceHolder = strings.Join(stringx.Remove(addressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAddressIdPrefix = "cache:address:id:"
)

type (
	addressModel interface {
		Insert(ctx context.Context, data *Address) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Address, error)
		Update(ctx context.Context, data *Address) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAddressModel struct {
		sqlc.CachedConn
		table string
	}

	Address struct {
		Id         int64          `db:"id"`
		UserId     string         `db:"user_id"`     // 用户id
		Title      sql.NullString `db:"title"`       // 地址名称
		Receiver   string         `db:"receiver"`    // 收货人
		ProvinceId int64          `db:"province_id"` // 省
		CityId     int64          `db:"city_id"`     // 市
		DistrictId int64          `db:"district_id"` // 区/县
		Place      string         `db:"place"`       // 地址
		Mobile     sql.NullString `db:"mobile"`      // 手机
		Tel        sql.NullString `db:"tel"`         // 固定电话
		Email      sql.NullString `db:"email"`       // 电子邮箱
		IsDeleted  sql.NullInt64  `db:"is_deleted"`  // 逻辑删除
	}
)

func newAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAddressModel {
	return &defaultAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`address`",
	}
}

func (m *defaultAddressModel) Delete(ctx context.Context, id int64) error {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, addressIdKey)
	return err
}

func (m *defaultAddressModel) FindOne(ctx context.Context, id int64) (*Address, error) {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, id)
	var resp Address
	err := m.QueryRowCtx(ctx, &resp, addressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAddressModel) Insert(ctx context.Context, data *Address) (sql.Result, error) {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, addressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Title, data.Receiver, data.ProvinceId, data.CityId, data.DistrictId, data.Place, data.Mobile, data.Tel, data.Email, data.IsDeleted)
	}, addressIdKey)
	return ret, err
}

func (m *defaultAddressModel) Update(ctx context.Context, data *Address) error {
	addressIdKey := fmt.Sprintf("%s%v", cacheAddressIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, addressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Title, data.Receiver, data.ProvinceId, data.CityId, data.DistrictId, data.Place, data.Mobile, data.Tel, data.Email, data.IsDeleted, data.Id)
	}, addressIdKey)
	return err
}

func (m *defaultAddressModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAddressIdPrefix, primary)
}

func (m *defaultAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", addressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAddressModel) tableName() string {
	return m.table
}
