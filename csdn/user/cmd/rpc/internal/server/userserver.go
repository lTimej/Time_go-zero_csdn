// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"liujun/Time_go-zero_csdn/csdn/user/cmd/rpc/internal/logic"
	"liujun/Time_go-zero_csdn/csdn/user/cmd/rpc/internal/svc"
	"liujun/Time_go-zero_csdn/csdn/user/cmd/rpc/types/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) UserLogin(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewUserLoginLogic(ctx, s.svcCtx)
	return l.UserLogin(in)
}

func (s *UserServer) GenerateToken(ctx context.Context, in *user.GenerateTokenRequest) (*user.GenerateTokenResponse, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

func (s *UserServer) UserCurrInfo(ctx context.Context, in *user.UserCurrInfoRequest) (*user.UserCurrInfoResponse, error) {
	l := logic.NewUserCurrInfoLogic(ctx, s.svcCtx)
	return l.UserCurrInfo(in)
}

func (s *UserServer) SendSmsCode(ctx context.Context, in *user.SmsRequest) (*user.SmsResponse, error) {
	l := logic.NewSendSmsCodeLogic(ctx, s.svcCtx)
	return l.SendSmsCode(in)
}

func (s *UserServer) IsFocueUser(ctx context.Context, in *user.IsFocusUserRequest) (*user.IsFocusUserResponse, error) {
	l := logic.NewIsFocueUserLogic(ctx, s.svcCtx)
	return l.IsFocueUser(in)
}

func (s *UserServer) FocueUser(ctx context.Context, in *user.FocusUserRequest) (*user.FocusUserResponse, error) {
	l := logic.NewFocueUserLogic(ctx, s.svcCtx)
	return l.FocueUser(in)
}

func (s *UserServer) CancelFocueUser(ctx context.Context, in *user.CancelFocusUserRequest) (*user.CancelFocusUserResponse, error) {
	l := logic.NewCancelFocueUserLogic(ctx, s.svcCtx)
	return l.CancelFocueUser(in)
}

func (s *UserServer) UserFocusList(ctx context.Context, in *user.UserFocusListRequest) (*user.UserFocusListResponse, error) {
	l := logic.NewUserFocusListLogic(ctx, s.svcCtx)
	return l.UserFocusList(in)
}

func (s *UserServer) UserFansList(ctx context.Context, in *user.UserFansListRequest) (*user.UserFansListResponse, error) {
	l := logic.NewUserFansListLogic(ctx, s.svcCtx)
	return l.UserFansList(in)
}

func (s *UserServer) UserInfoEdit(ctx context.Context, in *user.UserInfoEditRequest) (*user.UserInfoEditResponse, error) {
	l := logic.NewUserInfoEditLogic(ctx, s.svcCtx)
	return l.UserInfoEdit(in)
}

func (s *UserServer) UserAddress(ctx context.Context, in *user.UserAddressRequest) (*user.UserAddressResponse, error) {
	l := logic.NewUserAddressLogic(ctx, s.svcCtx)
	return l.UserAddress(in)
}

func (s *UserServer) UserUpdateAddress(ctx context.Context, in *user.UpdateUserAddressRequest) (*user.UpdateUserAddressResponse, error) {
	l := logic.NewUserUpdateAddressLogic(ctx, s.svcCtx)
	return l.UserUpdateAddress(in)
}

func (s *UserServer) UserGetAddress(ctx context.Context, in *user.GetUserAddressRequest) (*user.GetUserAddressResponse, error) {
	l := logic.NewUserGetAddressLogic(ctx, s.svcCtx)
	return l.UserGetAddress(in)
}

func (s *UserServer) GetAddress(ctx context.Context, in *user.GetAddressRequest) (*user.GetAddressResponse, error) {
	l := logic.NewGetAddressLogic(ctx, s.svcCtx)
	return l.GetAddress(in)
}
