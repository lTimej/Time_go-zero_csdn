// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"liujun/Time_go-zero_csdn/csdn/user/cmd/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenRequest  = user.GenerateTokenRequest
	GenerateTokenResponse = user.GenerateTokenResponse
	IsFocusUserRequest    = user.IsFocusUserRequest
	IsFocusUserResponse   = user.IsFocusUserResponse
	LoginRequest          = user.LoginRequest
	LoginResponse         = user.LoginResponse
	SmsRequest            = user.SmsRequest
	SmsResponse           = user.SmsResponse
	UserCurrInfoRequest   = user.UserCurrInfoRequest
	UserCurrInfoResponse  = user.UserCurrInfoResponse

	User interface {
		UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
		UserCurrInfo(ctx context.Context, in *UserCurrInfoRequest, opts ...grpc.CallOption) (*UserCurrInfoResponse, error)
		SendSmsCode(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*SmsResponse, error)
		IsFocueUser(ctx context.Context, in *IsFocusUserRequest, opts ...grpc.CallOption) (*IsFocusUserResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserLogin(ctx, in, opts...)
}

func (m *defaultUser) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUser) UserCurrInfo(ctx context.Context, in *UserCurrInfoRequest, opts ...grpc.CallOption) (*UserCurrInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserCurrInfo(ctx, in, opts...)
}

func (m *defaultUser) SendSmsCode(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*SmsResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendSmsCode(ctx, in, opts...)
}

func (m *defaultUser) IsFocueUser(ctx context.Context, in *IsFocusUserRequest, opts ...grpc.CallOption) (*IsFocusUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.IsFocueUser(ctx, in, opts...)
}
