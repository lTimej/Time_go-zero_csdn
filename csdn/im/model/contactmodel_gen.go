// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	contactFieldNames          = builder.RawFieldNames(&Contact{})
	contactRows                = "id,owner_id,target_id,type"
	contactRowsExpectAutoSet   = strings.Join(stringx.Remove(contactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	contactInfo                = "type,owner_id,target_id"
	contactRowsWithPlaceHolder = strings.Join(stringx.Remove(contactFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheContactIdPrefix             = "cache:contact:id:"
	cacheContactUserIdTargetIdPrefix = "cache:contact:userid:targetid:"
)

type (
	contactModel interface {
		RowDefaultBuilder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *Contact) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Contact, error)
		FindOneByUserIdTargetId(ctx context.Context, user_id, target_id string) (*ContactInfo, error)
		FindAllByUserId(ctx context.Context, orderBy string, builder squirrel.SelectBuilder) ([]*Contact, error)
		Update(ctx context.Context, data *Contact) error
		Delete(ctx context.Context, id int64) error
	}

	defaultContactModel struct {
		sqlc.CachedConn
		table string
	}

	Contact struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		DeletedAt time.Time `db:"deleted_at"`
		OwnerId   string    `db:"owner_id"`
		TargetId  string    `db:"target_id"`
		Type      int64     `db:"type"`
		Desc      string    `db:"desc"`
	}
	ContactInfo struct {
		Id       int64  `db:"id"`
		OwnerId  string `db:"owner_id"`
		TargetId string `db:"target_id"`
		Type     int64  `db:"type"`
	}
)

func newContactModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultContactModel {
	return &defaultContactModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`contact`",
	}
}

func (m *defaultContactModel) Delete(ctx context.Context, id int64) error {
	contactIdKey := fmt.Sprintf("%s%v", cacheContactIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, contactIdKey)
	return err
}

func (m *defaultContactModel) FindOne(ctx context.Context, id int64) (*Contact, error) {
	contactIdKey := fmt.Sprintf("%s%v", cacheContactIdPrefix, id)
	var resp Contact
	err := m.QueryRowCtx(ctx, &resp, contactIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contactRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultContactModel) FindOneByUserIdTargetId(ctx context.Context, user_id, target_id string) (*ContactInfo, error) {
	contactIdKey := fmt.Sprintf("%s%v:%v", cacheContactUserIdTargetIdPrefix, user_id, target_id)
	fmt.Println(contactIdKey, "----------**************")
	var resp ContactInfo
	err := m.QueryRowCtx(ctx, &resp, contactIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `owner_id` = ? and `target_id` = ? limit 1", contactRows, m.table)
		fmt.Println(query, "&&&&&&&&&&*************", user_id, target_id)
		return conn.QueryRowCtx(ctx, v, query, user_id, target_id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultContactModel) FindAllByUserId(ctx context.Context, orderBy string, builder squirrel.SelectBuilder) ([]*Contact, error) {
	if orderBy == "" {
		builder = builder.OrderBy("contact.created_at DESC")
	} else {
		builder = builder.OrderBy("contact." + orderBy)
	}
	query, values, err := builder.ToSql()

	if err != nil {
		return nil, err
	}

	var resp []*Contact
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultContactModel) Insert(ctx context.Context, data *Contact) (sql.Result, error) {
	contactIdKey := fmt.Sprintf("%s%v", cacheContactIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, contactInfo)
		return conn.ExecCtx(ctx, query, data.Type, data.OwnerId, data.TargetId)
	}, contactIdKey)
	return ret, err
}

func (m *defaultContactModel) Update(ctx context.Context, data *Contact) error {
	contactIdKey := fmt.Sprintf("%s%v:%v", cacheContactUserIdTargetIdPrefix, data.OwnerId, data.TargetId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, "type = 1")
		return conn.ExecCtx(ctx, query, data.Id)
	}, contactIdKey)
	return err
}

func (m *defaultContactModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheContactIdPrefix, primary)
}

func (m *defaultContactModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", contactRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultContactModel) tableName() string {
	return m.table
}

func (m *defaultContactModel) RowDefaultBuilder() squirrel.SelectBuilder {
	return squirrel.Select(contactRows).From(m.table)
}
