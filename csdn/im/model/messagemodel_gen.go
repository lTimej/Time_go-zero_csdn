// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageFieldNames          = builder.RawFieldNames(&Message{})
	messageRows                = strings.Join(messageFieldNames, ",")
	messageRowsExpectAutoSet   = strings.Join(stringx.Remove(messageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messageRowsWithPlaceHolder = strings.Join(stringx.Remove(messageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMessageIdPrefix = "cache:message:id:"
)

type (
	messageModel interface {
		Insert(ctx context.Context, data *Message) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Message, error)
		Update(ctx context.Context, data *Message) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMessageModel struct {
		sqlc.CachedConn
		table string
	}

	Message struct {
		Id         int64     `db:"id"`
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
		DeletedAt  time.Time `db:"deleted_at"`
		FormId     string    `db:"form_id"`
		TargetId   string    `db:"target_id"`
		UserId     string    `db:"user_id"`
		Type       int64     `db:"type"`
		Media      int64     `db:"media"`
		Content    string    `db:"content"`
		CreateTime int64     `db:"create_time"`
		ReadTime   int64     `db:"read_time"`
		Pic        string    `db:"pic"`
		Url        string    `db:"url"`
		Desc       string    `db:"desc"`
		Amount     int64     `db:"amount"`
	}
)

func newMessageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMessageModel {
	return &defaultMessageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`message`",
	}
}

func (m *defaultMessageModel) Delete(ctx context.Context, id int64) error {
	messageIdKey := fmt.Sprintf("%s%v", cacheMessageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, messageIdKey)
	return err
}

func (m *defaultMessageModel) FindOne(ctx context.Context, id int64) (*Message, error) {
	messageIdKey := fmt.Sprintf("%s%v", cacheMessageIdPrefix, id)
	var resp Message
	err := m.QueryRowCtx(ctx, &resp, messageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Insert(ctx context.Context, data *Message) (sql.Result, error) {
	messageIdKey := fmt.Sprintf("%s%v", cacheMessageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, messageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.FormId, data.TargetId, data.UserId, data.Type, data.Media, data.Content, data.ReadTime, data.Pic, data.Url, data.Desc, data.Amount)
	}, messageIdKey)
	return ret, err
}

func (m *defaultMessageModel) Update(ctx context.Context, data *Message) error {
	messageIdKey := fmt.Sprintf("%s%v", cacheMessageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.FormId, data.TargetId, data.UserId, data.Type, data.Media, data.Content, data.ReadTime, data.Pic, data.Url, data.Desc, data.Amount, data.Id)
	}, messageIdKey)
	return err
}

func (m *defaultMessageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMessageIdPrefix, primary)
}

func (m *defaultMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMessageModel) tableName() string {
	return m.table
}
