type UserInfo {
	UserName  string `json:"user_name"`
	HeadPhoto string `json:"head_photo"`
	Introduce string `json:"introduce"`
	UserId    string `json:"user_id"`
}

type UserChatRecords {
	TargetUserId string `json:"target_user_id"`
	UserId       string `json:"user_id"`
	Type         int64  `json:"type"`
	CreateTime   string `json:"create_time"`
	Content      string `json:"content"`
	Media        int64  `json:"media"`
}

type UserMessageListRequest {}

type UserMessageListResponse {
	UserInfos []UserInfo `json:"user_infos"`
}

type UserChatRequest {
	Token string `josn:"token"`
}

type UserChatResponse{}

type UserChatRecordRequest {
	TargetUserId string `json:"target_user_id,optional"`
	Page         int64  `json:"page,optional"`
	PageNum      int64  `json:"page_num,optional"`
}

type UserChatRecordResponse {
	ChatRecords []UserChatRecords `json:"chat_records"`
}

@server (
	jwt: JwtAuth
	middleware: SetUidToCtxMiddleware
)

service api-api {
	@handler UserMessageList
	get /v1/im/user/list(UserMessageListRequest) returns (UserMessageListResponse)
	@handler UserChat
	get /v1/im/user/chat(UserChatRequest) returns (UserChatResponse)
	@handler UserChatRecord
	get /v1/im/chat/records(UserChatRecordRequest) returns (UserChatRecordResponse)
}