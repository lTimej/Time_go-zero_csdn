// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"liujun/Time_go-zero_csdn/csdn/order/cmd/rpc/types/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	OrderCreateRequest  = order.OrderCreateRequest
	OrderCreateResponse = order.OrderCreateResponse
	OrderGetRequest     = order.OrderGetRequest
	OrderGetResponse    = order.OrderGetResponse
	OrderInfo           = order.OrderInfo
	OrderSpec           = order.OrderSpec
	Sku                 = order.Sku

	Order interface {
		OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error)
		OrderGet(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) OrderCreate(ctx context.Context, in *OrderCreateRequest, opts ...grpc.CallOption) (*OrderCreateResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderCreate(ctx, in, opts...)
}

func (m *defaultOrder) OrderGet(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderGet(ctx, in, opts...)
}
