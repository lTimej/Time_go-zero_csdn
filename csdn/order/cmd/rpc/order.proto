syntax = "proto3";

package order;
option go_package = "./order";

message Sku{
    int64 sku_id = 1;
    string spec_id = 2;
    string specs = 3;
    int64 count = 4;
}

message OrderCreateRequest{
    int64 address_id = 1;
    string user_id = 2;
    int64 total_count = 3;
    float total_price = 4;
    repeated Sku sku = 8;
}

message OrderCreateResponse{
    string sn = 1;
}

message OrderGetRequest{
    string user_id = 1;
    int64 pay_status = 2;
}

message OrderSpec{
    int64 sku_id = 1;
    string spec_id = 2;
    string specs = 3;
    int64 count = 4;
    float price = 5;
    string default_image = 6;
    string title = 7;
}

message OrderInfo{
  float total_price = 1;
  int64 total_count = 2;
  string sn = 3;
  int64 pay_status = 4;
  float freight = 5;
  int64 address_id = 6;
  string create_time = 7;
  repeated OrderSpec order_spec = 8;
}

message OrderGetResponse{
  repeated OrderInfo order_info = 1;
}

message OrderDescInfo{
  float total_price = 1;
  int64 total_count = 2;
  string sn = 3;
  int64 pay_status = 4;
  float freight = 5;
  int64 address_id = 6;
  int64 id = 7;
}

message OrderDescRequest{
    string sn = 1;
}

message OrderDescResponse{
  OrderDescInfo order_desc_info = 1;
}

message OrderUpdateRequest{
    string sn = 1;
    int64 pay_status = 2;
}

message OrderUpdateResponse{
  string sn = 1;
}

message CreateRequest {
  int64 goodsId = 1;
  int64 userId = 2;
  int64 num = 3;
}

message CreateResponse {
}

service Order {
  rpc OrderCreate(OrderCreateRequest) returns (OrderCreateResponse);
  rpc OrderGet(OrderGetRequest) returns (OrderGetResponse);
  rpc OrderDesc(OrderDescRequest) returns (OrderDescResponse);
  rpc OrderUpdate(OrderUpdateRequest) returns (OrderUpdateResponse);
  //分布式事务
  rpc create(CreateRequest)returns(CreateResponse);
  rpc createRollback(CreateRequest)returns(CreateResponse);
}
