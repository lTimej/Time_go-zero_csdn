syntax = "proto3";

package channel;

option go_package = "./channel";

message ChannelList{
    int64 id = 1;
    string channel_name = 2;
}

message ChannelListRequest {}

message ChannelListResponse {
    repeated ChannelList channels = 1;
}

message DefaultChannelRequest{}

message DefaultChannelResponse{
    repeated ChannelList channels = 1;
}

message UserChannelRequest{
    int64 userId = 1;
}

message UserChannelResponse{
    repeated ChannelList channels = 1;
}

message UserAddChannelRequest{
    int64 ChannelId = 1;
    string ChannelName = 2;
    int64 userId = 3;
}

message UserAddChannelResponse{
    repeated ChannelList channels = 1;
}

message UserPatchChannelRequest{
    int64 ChannelId = 1;
    int64 userId = 2;
}

message UserPatchChannelResponse{
    repeated ChannelList channels = 1;
}

message ArticleChannelRequest{
    int64 ChannelId = 1;
    int32 Page = 2;
    int32 PageNum = 3;
}

message ArticleList{
    string Title = 1;
    int64 UserId = 2;
    string CreateTime = 3;
    int64 ArtId = 4;
    int64 ChannelId = 5;
    string Content = 6;
    int32 AllowComment = 7;
    string UserName = 8;
    string HeadPhoto = 9;
    string career = 10;
    int32 CodeYear = 11;
    int32 ReadNum = 12;
    int32 CommentNum = 13;
    int32 LikeNum = 14;
    int32 CollectionNum = 15;
}

message ArticleChannelResponse{
    repeated ArticleList articles = 1;
}

service Channel {
    rpc AllChannel(ChannelListRequest) returns(ChannelListResponse);
    rpc DefaultChannel(DefaultChannelRequest) returns(DefaultChannelResponse);
    rpc UserChannel(UserChannelRequest) returns(UserChannelResponse);
    rpc UserAddChannel(UserAddChannelRequest) returns(UserAddChannelResponse);
    rpc UserPatchChannel(UserPatchChannelRequest) returns(UserPatchChannelResponse);
    rpc ArticleChannel(ArticleChannelRequest) returns(ArticleChannelResponse);
}