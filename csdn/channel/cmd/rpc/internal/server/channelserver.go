// Code generated by goctl. DO NOT EDIT.
// Source: channel.proto

package server

import (
	"context"

	"liujun/Time_go-zero_csdn/csdn/channel/cmd/rpc/internal/logic"
	"liujun/Time_go-zero_csdn/csdn/channel/cmd/rpc/internal/svc"
	"liujun/Time_go-zero_csdn/csdn/channel/cmd/rpc/types/channel"
)

type ChannelServer struct {
	svcCtx *svc.ServiceContext
	channel.UnimplementedChannelServer
}

func NewChannelServer(svcCtx *svc.ServiceContext) *ChannelServer {
	return &ChannelServer{
		svcCtx: svcCtx,
	}
}

func (s *ChannelServer) AllChannel(ctx context.Context, in *channel.ChannelListRequest) (*channel.ChannelListResponse, error) {
	l := logic.NewAllChannelLogic(ctx, s.svcCtx)
	return l.AllChannel(in)
}

func (s *ChannelServer) DefaultChannel(ctx context.Context, in *channel.DefaultChannelRequest) (*channel.DefaultChannelResponse, error) {
	l := logic.NewDefaultChannelLogic(ctx, s.svcCtx)
	return l.DefaultChannel(in)
}

func (s *ChannelServer) UserChannel(ctx context.Context, in *channel.UserChannelRequest) (*channel.UserChannelResponse, error) {
	l := logic.NewUserChannelLogic(ctx, s.svcCtx)
	return l.UserChannel(in)
}

func (s *ChannelServer) UserAddChannel(ctx context.Context, in *channel.UserAddChannelRequest) (*channel.UserAddChannelResponse, error) {
	l := logic.NewUserAddChannelLogic(ctx, s.svcCtx)
	return l.UserAddChannel(in)
}

func (s *ChannelServer) UserPatchChannel(ctx context.Context, in *channel.UserPatchChannelRequest) (*channel.UserPatchChannelResponse, error) {
	l := logic.NewUserPatchChannelLogic(ctx, s.svcCtx)
	return l.UserPatchChannel(in)
}
