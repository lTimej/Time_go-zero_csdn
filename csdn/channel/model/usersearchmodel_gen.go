// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userSearchFieldNames          = builder.RawFieldNames(&UserSearch{})
	userSearchRows                = strings.Join(userSearchFieldNames, ",")
	userSearchRowsExpectAutoSet   = strings.Join(stringx.Remove(userSearchFieldNames, "`search_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userSearchRowsWithPlaceHolder = strings.Join(stringx.Remove(userSearchFieldNames, "`search_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserSearchSearchIdPrefix = "cache:userSearch:searchId:"
)

type (
	userSearchModel interface {
		Insert(ctx context.Context, data *UserSearch) (sql.Result, error)
		FindOne(ctx context.Context, searchId int64) (*UserSearch, error)
		Update(ctx context.Context, data *UserSearch) error
		Delete(ctx context.Context, searchId int64) error
	}

	defaultUserSearchModel struct {
		sqlc.CachedConn
		table string
	}

	UserSearch struct {
		SearchId   int64     `db:"search_id"`   // 主键id
		UserId     int64     `db:"user_id"`     // 用户ID
		Keyword    string    `db:"keyword"`     // 关键词
		CreateTime time.Time `db:"create_time"` // 创建时间
		IsDeleted  int64     `db:"is_deleted"`  // 是否删除, 0-未删除，1-已删除
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newUserSearchModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserSearchModel {
	return &defaultUserSearchModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_search`",
	}
}

func (m *defaultUserSearchModel) Delete(ctx context.Context, searchId int64) error {
	userSearchSearchIdKey := fmt.Sprintf("%s%v", cacheUserSearchSearchIdPrefix, searchId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `search_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, searchId)
	}, userSearchSearchIdKey)
	return err
}

func (m *defaultUserSearchModel) FindOne(ctx context.Context, searchId int64) (*UserSearch, error) {
	userSearchSearchIdKey := fmt.Sprintf("%s%v", cacheUserSearchSearchIdPrefix, searchId)
	var resp UserSearch
	err := m.QueryRowCtx(ctx, &resp, userSearchSearchIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `search_id` = ? limit 1", userSearchRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, searchId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserSearchModel) Insert(ctx context.Context, data *UserSearch) (sql.Result, error) {
	userSearchSearchIdKey := fmt.Sprintf("%s%v", cacheUserSearchSearchIdPrefix, data.SearchId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userSearchRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Keyword, data.IsDeleted)
	}, userSearchSearchIdKey)
	return ret, err
}

func (m *defaultUserSearchModel) Update(ctx context.Context, data *UserSearch) error {
	userSearchSearchIdKey := fmt.Sprintf("%s%v", cacheUserSearchSearchIdPrefix, data.SearchId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `search_id` = ?", m.table, userSearchRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Keyword, data.IsDeleted, data.SearchId)
	}, userSearchSearchIdKey)
	return err
}

func (m *defaultUserSearchModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserSearchSearchIdPrefix, primary)
}

func (m *defaultUserSearchModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `search_id` = ? limit 1", userSearchRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserSearchModel) tableName() string {
	return m.table
}
