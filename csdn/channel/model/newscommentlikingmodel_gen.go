// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	newsCommentLikingFieldNames          = builder.RawFieldNames(&NewsCommentLiking{})
	newsCommentLikingRows                = strings.Join(newsCommentLikingFieldNames, ",")
	newsCommentLikingRowsExpectAutoSet   = strings.Join(stringx.Remove(newsCommentLikingFieldNames, "`liking_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	newsCommentLikingRowsWithPlaceHolder = strings.Join(stringx.Remove(newsCommentLikingFieldNames, "`liking_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheNewsCommentLikingLikingIdPrefix        = "cache:newsCommentLiking:likingId:"
	cacheNewsCommentLikingUserIdCommentIdPrefix = "cache:newsCommentLiking:userId:commentId:"
)

type (
	newsCommentLikingModel interface {
		Insert(ctx context.Context, data *NewsCommentLiking) (sql.Result, error)
		FindOne(ctx context.Context, likingId int64) (*NewsCommentLiking, error)
		FindOneByUserIdCommentId(ctx context.Context, userId int64, commentId int64) (*NewsCommentLiking, error)
		Update(ctx context.Context, data *NewsCommentLiking) error
		Delete(ctx context.Context, likingId int64) error
	}

	defaultNewsCommentLikingModel struct {
		sqlc.CachedConn
		table string
	}

	NewsCommentLiking struct {
		LikingId   int64     `db:"liking_id"`   // 主键id
		UserId     int64     `db:"user_id"`     // 用户ID
		CommentId  int64     `db:"comment_id"`  // 评论ID
		CreateTime time.Time `db:"create_time"` // 创建时间
		IsDeleted  int64     `db:"is_deleted"`  // 是否取消点赞, 0-未取消, 1-已取消
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newNewsCommentLikingModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultNewsCommentLikingModel {
	return &defaultNewsCommentLikingModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`news_comment_liking`",
	}
}

func (m *defaultNewsCommentLikingModel) Delete(ctx context.Context, likingId int64) error {
	data, err := m.FindOne(ctx, likingId)
	if err != nil {
		return err
	}

	newsCommentLikingLikingIdKey := fmt.Sprintf("%s%v", cacheNewsCommentLikingLikingIdPrefix, likingId)
	newsCommentLikingUserIdCommentIdKey := fmt.Sprintf("%s%v:%v", cacheNewsCommentLikingUserIdCommentIdPrefix, data.UserId, data.CommentId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `liking_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, likingId)
	}, newsCommentLikingLikingIdKey, newsCommentLikingUserIdCommentIdKey)
	return err
}

func (m *defaultNewsCommentLikingModel) FindOne(ctx context.Context, likingId int64) (*NewsCommentLiking, error) {
	newsCommentLikingLikingIdKey := fmt.Sprintf("%s%v", cacheNewsCommentLikingLikingIdPrefix, likingId)
	var resp NewsCommentLiking
	err := m.QueryRowCtx(ctx, &resp, newsCommentLikingLikingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `liking_id` = ? limit 1", newsCommentLikingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, likingId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNewsCommentLikingModel) FindOneByUserIdCommentId(ctx context.Context, userId int64, commentId int64) (*NewsCommentLiking, error) {
	newsCommentLikingUserIdCommentIdKey := fmt.Sprintf("%s%v:%v", cacheNewsCommentLikingUserIdCommentIdPrefix, userId, commentId)
	var resp NewsCommentLiking
	err := m.QueryRowIndexCtx(ctx, &resp, newsCommentLikingUserIdCommentIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `comment_id` = ? limit 1", newsCommentLikingRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, commentId); err != nil {
			return nil, err
		}
		return resp.LikingId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNewsCommentLikingModel) Insert(ctx context.Context, data *NewsCommentLiking) (sql.Result, error) {
	newsCommentLikingLikingIdKey := fmt.Sprintf("%s%v", cacheNewsCommentLikingLikingIdPrefix, data.LikingId)
	newsCommentLikingUserIdCommentIdKey := fmt.Sprintf("%s%v:%v", cacheNewsCommentLikingUserIdCommentIdPrefix, data.UserId, data.CommentId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, newsCommentLikingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.CommentId, data.IsDeleted)
	}, newsCommentLikingLikingIdKey, newsCommentLikingUserIdCommentIdKey)
	return ret, err
}

func (m *defaultNewsCommentLikingModel) Update(ctx context.Context, newData *NewsCommentLiking) error {
	data, err := m.FindOne(ctx, newData.LikingId)
	if err != nil {
		return err
	}

	newsCommentLikingLikingIdKey := fmt.Sprintf("%s%v", cacheNewsCommentLikingLikingIdPrefix, data.LikingId)
	newsCommentLikingUserIdCommentIdKey := fmt.Sprintf("%s%v:%v", cacheNewsCommentLikingUserIdCommentIdPrefix, data.UserId, data.CommentId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `liking_id` = ?", m.table, newsCommentLikingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.CommentId, newData.IsDeleted, newData.LikingId)
	}, newsCommentLikingLikingIdKey, newsCommentLikingUserIdCommentIdKey)
	return err
}

func (m *defaultNewsCommentLikingModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheNewsCommentLikingLikingIdPrefix, primary)
}

func (m *defaultNewsCommentLikingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `liking_id` = ? limit 1", newsCommentLikingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNewsCommentLikingModel) tableName() string {
	return m.table
}
