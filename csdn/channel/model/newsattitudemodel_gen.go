// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	newsAttitudeFieldNames          = builder.RawFieldNames(&NewsAttitude{})
	newsAttitudeRows                = strings.Join(newsAttitudeFieldNames, ",")
	newsAttitudeRowsExpectAutoSet   = strings.Join(stringx.Remove(newsAttitudeFieldNames, "`attitude_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	newsAttitudeRowsWithPlaceHolder = strings.Join(stringx.Remove(newsAttitudeFieldNames, "`attitude_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheNewsAttitudeAttitudeIdPrefix      = "cache:newsAttitude:attitudeId:"
	cacheNewsAttitudeUserIdArticleIdPrefix = "cache:newsAttitude:userId:articleId:"
)

type (
	newsAttitudeModel interface {
		AllArticleAttitudeBuilder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *NewsAttitude) (sql.Result, error)
		FindOne(ctx context.Context, attitudeId int64) (*NewsAttitude, error)
		FindAllByArticleId(ctx context.Context, rowBuilder squirrel.SelectBuilder) ([]*NewsAttitudeInfo, error)
		FindOneByUserIdArticleId(ctx context.Context, userId string, articleId int64) (*NewsAttitude, error)
		Update(ctx context.Context, data *NewsAttitude) error
		Delete(ctx context.Context, attitudeId int64) error
	}

	defaultNewsAttitudeModel struct {
		sqlc.CachedConn
		table string
	}
	NewsAttitudeInfo struct {
		HeadPhoto string `db:"head_photo"`
		Aid       int64  `db:"aid"`
	}
	NewsAttitude struct {
		AttitudeId int64     `db:"attitude_id"` // 主键id
		UserId     string    `db:"user_id"`     // 用户ID
		ArticleId  int64     `db:"article_id"`  // 文章ID
		Attitude   int64     `db:"attitude"`    // 态度，0-不喜欢，1-喜欢
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newNewsAttitudeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultNewsAttitudeModel {
	return &defaultNewsAttitudeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`news_attitude`",
	}
}

func (m *defaultNewsAttitudeModel) Delete(ctx context.Context, attitudeId int64) error {
	data, err := m.FindOne(ctx, attitudeId)
	if err != nil {
		return err
	}

	newsAttitudeAttitudeIdKey := fmt.Sprintf("%s%v", cacheNewsAttitudeAttitudeIdPrefix, attitudeId)
	newsAttitudeUserIdArticleIdKey := fmt.Sprintf("%s%v:%v", cacheNewsAttitudeUserIdArticleIdPrefix, data.UserId, data.ArticleId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `attitude_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, attitudeId)
	}, newsAttitudeAttitudeIdKey, newsAttitudeUserIdArticleIdKey)
	return err
}

func (m *defaultNewsAttitudeModel) FindOne(ctx context.Context, attitudeId int64) (*NewsAttitude, error) {
	newsAttitudeAttitudeIdKey := fmt.Sprintf("%s%v", cacheNewsAttitudeAttitudeIdPrefix, attitudeId)
	var resp NewsAttitude
	err := m.QueryRowCtx(ctx, &resp, newsAttitudeAttitudeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `attitude_id` = ? limit 1", newsAttitudeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, attitudeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNewsAttitudeModel) FindAllByArticleId(ctx context.Context, rowBuilder squirrel.SelectBuilder) ([]*NewsAttitudeInfo, error) {
	query, values, err := rowBuilder.Join("user_basic on user_basic.user_id = news_attitude.user_id").ToSql()
	if err != nil {
		return nil, err
	}
	var resp []*NewsAttitudeInfo
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultNewsAttitudeModel) FindOneByUserIdArticleId(ctx context.Context, userId string, articleId int64) (*NewsAttitude, error) {
	newsAttitudeUserIdArticleIdKey := fmt.Sprintf("%s%v:%v", cacheNewsAttitudeUserIdArticleIdPrefix, userId, articleId)
	var resp NewsAttitude
	err := m.QueryRowIndexCtx(ctx, &resp, newsAttitudeUserIdArticleIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `article_id` = ? limit 1", newsAttitudeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, articleId); err != nil {
			fmt.Println(err, "咋了")
			return nil, err
		}
		return resp.AttitudeId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultNewsAttitudeModel) Insert(ctx context.Context, data *NewsAttitude) (sql.Result, error) {
	newsAttitudeAttitudeIdKey := fmt.Sprintf("%s%v", cacheNewsAttitudeAttitudeIdPrefix, data.AttitudeId)
	newsAttitudeUserIdArticleIdKey := fmt.Sprintf("%s%v:%v", cacheNewsAttitudeUserIdArticleIdPrefix, data.UserId, data.ArticleId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, newsAttitudeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ArticleId, data.Attitude)
	}, newsAttitudeAttitudeIdKey, newsAttitudeUserIdArticleIdKey)
	m.FindOneByUserIdArticleId(ctx, data.UserId, data.ArticleId)
	return ret, err
}

func (m *defaultNewsAttitudeModel) Update(ctx context.Context, newData *NewsAttitude) error {
	data, err := m.FindOne(ctx, newData.AttitudeId)
	if err != nil {
		return err
	}
	newsAttitudeAttitudeIdKey := fmt.Sprintf("%s%v", cacheNewsAttitudeAttitudeIdPrefix, data.AttitudeId)
	newsAttitudeUserIdArticleIdKey := fmt.Sprintf("%s%v:%v", cacheNewsAttitudeUserIdArticleIdPrefix, data.UserId, data.ArticleId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `attitude_id` = ?", m.table, newsAttitudeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.ArticleId, newData.Attitude, newData.AttitudeId)
	}, newsAttitudeAttitudeIdKey, newsAttitudeUserIdArticleIdKey)
	return err
}

func (m *defaultNewsAttitudeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheNewsAttitudeAttitudeIdPrefix, primary)
}

func (m *defaultNewsAttitudeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `attitude_id` = ? limit 1", newsAttitudeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNewsAttitudeModel) tableName() string {
	return m.table
}
func (m *defaultNewsAttitudeModel) AllArticleAttitudeBuilder() squirrel.SelectBuilder {
	return squirrel.Select("news_attitude.article_id,user_basic.profile_photo").From(m.table)
}
