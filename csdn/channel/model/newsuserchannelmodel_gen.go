// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	newsUserChannelFieldNames          = builder.RawFieldNames(&NewsUserChannel{})
	newsUserChannelRows                = strings.Join(newsUserChannelFieldNames, ",")
	newsUserChannelRowsExpectAutoSet   = strings.Join(stringx.Remove(newsUserChannelFieldNames, "`user_channel_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	newsUserChannelRowsWithPlaceHolder = strings.Join(stringx.Remove(newsUserChannelFieldNames, "`user_channel_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheNewsUserChannelUserChannelIdPrefix   = "cache:newsUserChannel:userChannelId:"
	cacheNewsUserChannelUserIdChannelIdPrefix = "cache:newsUserChannel:userId:channelId:"
)

type (
	newsUserChannelModel interface {
		Insert(ctx context.Context, data *NewsUserChannel) (sql.Result, error)
		FindOne(ctx context.Context, userChannelId int64) (*NewsUserChannel, error)
		FindOneByUserIdChannelId(ctx context.Context, userId int64, channelId int64) (*NewsUserChannel, error)
		Update(ctx context.Context, data *NewsUserChannel) error
		Delete(ctx context.Context, userChannelId int64) error
	}

	defaultNewsUserChannelModel struct {
		sqlc.CachedConn
		table string
	}

	NewsUserChannel struct {
		UserChannelId int64     `db:"user_channel_id"` // 主键id
		UserId        int64     `db:"user_id"`         // 用户ID
		ChannelId     int64     `db:"channel_id"`      // 频道ID
		CreateTime    time.Time `db:"create_time"`     // 创建时间
		IsDeleted     int64     `db:"is_deleted"`      // 是否删除, 0-未删除, 1-已删除
		UpdateTime    time.Time `db:"update_time"`     // 更新时间
		Sequence      int64     `db:"sequence"`        // 序号
	}
)

func newNewsUserChannelModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultNewsUserChannelModel {
	return &defaultNewsUserChannelModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`news_user_channel`",
	}
}

func (m *defaultNewsUserChannelModel) Delete(ctx context.Context, userChannelId int64) error {
	data, err := m.FindOne(ctx, userChannelId)
	if err != nil {
		return err
	}

	newsUserChannelUserChannelIdKey := fmt.Sprintf("%s%v", cacheNewsUserChannelUserChannelIdPrefix, userChannelId)
	newsUserChannelUserIdChannelIdKey := fmt.Sprintf("%s%v:%v", cacheNewsUserChannelUserIdChannelIdPrefix, data.UserId, data.ChannelId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_channel_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userChannelId)
	}, newsUserChannelUserChannelIdKey, newsUserChannelUserIdChannelIdKey)
	return err
}

func (m *defaultNewsUserChannelModel) FindOne(ctx context.Context, userChannelId int64) (*NewsUserChannel, error) {
	newsUserChannelUserChannelIdKey := fmt.Sprintf("%s%v", cacheNewsUserChannelUserChannelIdPrefix, userChannelId)
	var resp NewsUserChannel
	err := m.QueryRowCtx(ctx, &resp, newsUserChannelUserChannelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `user_channel_id` = ? limit 1", newsUserChannelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userChannelId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNewsUserChannelModel) FindOneByUserIdChannelId(ctx context.Context, userId int64, channelId int64) (*NewsUserChannel, error) {
	newsUserChannelUserIdChannelIdKey := fmt.Sprintf("%s%v:%v", cacheNewsUserChannelUserIdChannelIdPrefix, userId, channelId)
	var resp NewsUserChannel
	err := m.QueryRowIndexCtx(ctx, &resp, newsUserChannelUserIdChannelIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `channel_id` = ? limit 1", newsUserChannelRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, channelId); err != nil {
			return nil, err
		}
		return resp.UserChannelId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNewsUserChannelModel) Insert(ctx context.Context, data *NewsUserChannel) (sql.Result, error) {
	newsUserChannelUserChannelIdKey := fmt.Sprintf("%s%v", cacheNewsUserChannelUserChannelIdPrefix, data.UserChannelId)
	newsUserChannelUserIdChannelIdKey := fmt.Sprintf("%s%v:%v", cacheNewsUserChannelUserIdChannelIdPrefix, data.UserId, data.ChannelId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, newsUserChannelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ChannelId, data.IsDeleted, data.Sequence)
	}, newsUserChannelUserChannelIdKey, newsUserChannelUserIdChannelIdKey)
	return ret, err
}

func (m *defaultNewsUserChannelModel) Update(ctx context.Context, newData *NewsUserChannel) error {
	data, err := m.FindOne(ctx, newData.UserChannelId)
	if err != nil {
		return err
	}

	newsUserChannelUserChannelIdKey := fmt.Sprintf("%s%v", cacheNewsUserChannelUserChannelIdPrefix, data.UserChannelId)
	newsUserChannelUserIdChannelIdKey := fmt.Sprintf("%s%v:%v", cacheNewsUserChannelUserIdChannelIdPrefix, data.UserId, data.ChannelId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_channel_id` = ?", m.table, newsUserChannelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.ChannelId, newData.IsDeleted, newData.Sequence, newData.UserChannelId)
	}, newsUserChannelUserChannelIdKey, newsUserChannelUserIdChannelIdKey)
	return err
}

func (m *defaultNewsUserChannelModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheNewsUserChannelUserChannelIdPrefix, primary)
}

func (m *defaultNewsUserChannelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `user_channel_id` = ? limit 1", newsUserChannelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNewsUserChannelModel) tableName() string {
	return m.table
}
