// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"liujun/Time_go-zero_csdn/common/globalkey"
	"liujun/Time_go-zero_csdn/common/utils"
	"strings"

	"github.com/Masterminds/squirrel"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	newsArticleStatisticFieldNames          = builder.RawFieldNames(&NewsArticleStatistic{})
	newsArticleStatisticRows                = strings.Join(newsArticleStatisticFieldNames, ",")
	newsArticleStatisticRowsExpectAutoSet   = strings.Join(stringx.Remove(newsArticleStatisticFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	newsArticleStatisticRowsWithPlaceHolder = strings.Join(stringx.Remove(newsArticleStatisticFieldNames, "`article_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheNewsArticleStatisticArticleIdPrefix = "cache:newsArticleStatistic:articleId:"
)

type (
	newsArticleStatisticModel interface {
		RowBuilder() squirrel.SelectBuilder
		Insert(ctx context.Context, data *NewsArticleStatistic) (sql.Result, error)
		UpdateCache(ctx context.Context, data *NewsArticleStatistic) error
		FindOne(ctx context.Context, articleId int64) (*NewsArticleStatistic, error)
		FindOneByArticle(ctx context.Context, rowBuilder squirrel.SelectBuilder) (*NewsArticleStatistic, error)
		Update(ctx context.Context, data *NewsArticleStatistic) error
		Delete(ctx context.Context, articleId int64) error
	}

	defaultNewsArticleStatisticModel struct {
		sqlc.CachedConn
		table string
	}

	NewsArticleStatistic struct {
		ArticleId        int64 `db:"article_id"`         // 文章ID
		ReadCount        int64 `db:"read_count"`         // 阅读量
		LikeCount        int64 `db:"like_count"`         // 点赞数
		DislikeCount     int64 `db:"dislike_count"`      // 不喜欢数
		RepostCount      int64 `db:"repost_count"`       // 转发数
		CollectCount     int64 `db:"collect_count"`      // 收藏数
		FansCommentCount int64 `db:"fans_comment_count"` // 粉丝评论数
	}
)

func newNewsArticleStatisticModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultNewsArticleStatisticModel {
	return &defaultNewsArticleStatisticModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`news_article_statistic`",
	}
}

func (m *defaultNewsArticleStatisticModel) Delete(ctx context.Context, articleId int64) error {
	newsArticleStatisticArticleIdKey := fmt.Sprintf("%s%v", cacheNewsArticleStatisticArticleIdPrefix, articleId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `article_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, articleId)
	}, newsArticleStatisticArticleIdKey)
	return err
}

func (m *defaultNewsArticleStatisticModel) FindOne(ctx context.Context, articleId int64) (*NewsArticleStatistic, error) {
	newsArticleStatisticArticleIdKey := fmt.Sprintf(globalkey.ArticleStatus, utils.Int64ToString(articleId))
	var resp NewsArticleStatistic

	err := m.QueryRowCtx(ctx, &resp, newsArticleStatisticArticleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `article_id` = ? limit 1", newsArticleStatisticRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, articleId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultNewsArticleStatisticModel) FindOneByArticle(ctx context.Context, rowBuilder squirrel.SelectBuilder) (*NewsArticleStatistic, error) {
	query, values, err := rowBuilder.ToSql()
	if err != nil {
		return nil, err
	}
	var resp NewsArticleStatistic
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return &resp, nil
	default:
		return nil, err
	}
}
func (m *defaultNewsArticleStatisticModel) Insert(ctx context.Context, data *NewsArticleStatistic) (sql.Result, error) {
	newsArticleStatisticArticleIdKey := fmt.Sprintf("%s%v", cacheNewsArticleStatisticArticleIdPrefix, data.ArticleId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, newsArticleStatisticRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ArticleId, data.ReadCount, data.LikeCount, data.DislikeCount, data.RepostCount, data.CollectCount, data.FansCommentCount)
	}, newsArticleStatisticArticleIdKey)
	return ret, err
}

func (m *defaultNewsArticleStatisticModel) UpdateCache(ctx context.Context, data *NewsArticleStatistic) error {
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `article_id` = ?", m.table, newsArticleStatisticRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ReadCount, data.LikeCount, data.DislikeCount, data.RepostCount, data.CollectCount, data.FansCommentCount, data.ArticleId)
	})
	return err
}

func (m *defaultNewsArticleStatisticModel) Update(ctx context.Context, data *NewsArticleStatistic) error {
	newsArticleStatisticArticleIdKey := fmt.Sprintf("%s%v", cacheNewsArticleStatisticArticleIdPrefix, data.ArticleId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `article_id` = ?", m.table, newsArticleStatisticRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ReadCount, data.LikeCount, data.DislikeCount, data.RepostCount, data.CollectCount, data.FansCommentCount, data.ArticleId)
	}, newsArticleStatisticArticleIdKey)
	return err
}

func (m *defaultNewsArticleStatisticModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheNewsArticleStatisticArticleIdPrefix, primary)
}

func (m *defaultNewsArticleStatisticModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `article_id` = ? limit 1", newsArticleStatisticRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNewsArticleStatisticModel) tableName() string {
	return m.table
}

func (m *defaultNewsArticleStatisticModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
