// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	newsArticleContentFieldNames          = builder.RawFieldNames(&NewsArticleContent{})
	newsArticleContentRows                = strings.Join(newsArticleContentFieldNames, ",")
	newsArticleContentRowsExpectAutoSet   = strings.Join(stringx.Remove(newsArticleContentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	newsArticleContentRowsWithPlaceHolder = strings.Join(stringx.Remove(newsArticleContentFieldNames, "`article_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheNewsArticleContentArticleIdPrefix = "cache:newsArticleContent:articleId:"
)

type (
	newsArticleContentModel interface {
		Insert(ctx context.Context, data *NewsArticleContent) (sql.Result, error)
		FindOne(ctx context.Context, articleId int64) (*NewsArticleContent, error)
		Update(ctx context.Context, data *NewsArticleContent) error
		Delete(ctx context.Context, articleId int64) error
	}

	defaultNewsArticleContentModel struct {
		sqlc.CachedConn
		table string
	}

	NewsArticleContent struct {
		ArticleId int64  `db:"article_id"` // 文章ID
		Content   string `db:"content"`    // 文章内容
	}
)

func newNewsArticleContentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultNewsArticleContentModel {
	return &defaultNewsArticleContentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`news_article_content`",
	}
}

func (m *defaultNewsArticleContentModel) Delete(ctx context.Context, articleId int64) error {
	newsArticleContentArticleIdKey := fmt.Sprintf("%s%v", cacheNewsArticleContentArticleIdPrefix, articleId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `article_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, articleId)
	}, newsArticleContentArticleIdKey)
	return err
}

func (m *defaultNewsArticleContentModel) FindOne(ctx context.Context, articleId int64) (*NewsArticleContent, error) {
	newsArticleContentArticleIdKey := fmt.Sprintf("%s%v", cacheNewsArticleContentArticleIdPrefix, articleId)
	var resp NewsArticleContent
	err := m.QueryRowCtx(ctx, &resp, newsArticleContentArticleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `article_id` = ? limit 1", newsArticleContentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, articleId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNewsArticleContentModel) Insert(ctx context.Context, data *NewsArticleContent) (sql.Result, error) {
	newsArticleContentArticleIdKey := fmt.Sprintf("%s%v", cacheNewsArticleContentArticleIdPrefix, data.ArticleId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, newsArticleContentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ArticleId, data.Content)
	}, newsArticleContentArticleIdKey)
	return ret, err
}

func (m *defaultNewsArticleContentModel) Update(ctx context.Context, data *NewsArticleContent) error {
	newsArticleContentArticleIdKey := fmt.Sprintf("%s%v", cacheNewsArticleContentArticleIdPrefix, data.ArticleId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `article_id` = ?", m.table, newsArticleContentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Content, data.ArticleId)
	}, newsArticleContentArticleIdKey)
	return err
}

func (m *defaultNewsArticleContentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheNewsArticleContentArticleIdPrefix, primary)
}

func (m *defaultNewsArticleContentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `article_id` = ? limit 1", newsArticleContentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNewsArticleContentModel) tableName() string {
	return m.table
}
