// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userQualificationFieldNames          = builder.RawFieldNames(&UserQualification{})
	userQualificationRows                = strings.Join(userQualificationFieldNames, ",")
	userQualificationRowsExpectAutoSet   = strings.Join(stringx.Remove(userQualificationFieldNames, "`qualification_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userQualificationRowsWithPlaceHolder = strings.Join(stringx.Remove(userQualificationFieldNames, "`qualification_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserQualificationQualificationIdPrefix = "cache:userQualification:qualificationId:"
)

type (
	userQualificationModel interface {
		Insert(ctx context.Context, data *UserQualification) (sql.Result, error)
		FindOne(ctx context.Context, qualificationId int64) (*UserQualification, error)
		Update(ctx context.Context, data *UserQualification) error
		Delete(ctx context.Context, qualificationId int64) error
	}

	defaultUserQualificationModel struct {
		sqlc.CachedConn
		table string
	}

	UserQualification struct {
		QualificationId  int64          `db:"qualification_id"`  // 资质认证材料ID
		UserId           int64          `db:"user_id"`           // 用户ID
		Name             string         `db:"name"`              // 姓名
		IdNumber         sql.NullString `db:"id_number"`         // 身份证号
		Industry         string         `db:"industry"`          // 行业
		Company          string         `db:"company"`           // 公司
		Position         string         `db:"position"`          // 职位
		AddInfo          sql.NullString `db:"add_info"`          // 补充信息
		IdCardFront      sql.NullString `db:"id_card_front"`     // 身份证正面
		IdCardBack       sql.NullString `db:"id_card_back"`      // 身份证背面
		IdCardHandheld   sql.NullString `db:"id_card_handheld"`  // 手持身份证
		QualificationImg sql.NullString `db:"qualification_img"` // 证明资料
		CreateTime       time.Time      `db:"create_time"`       // 创建时间
		UpdateTime       time.Time      `db:"update_time"`       // 更新时间
	}
)

func newUserQualificationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserQualificationModel {
	return &defaultUserQualificationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_qualification`",
	}
}

func (m *defaultUserQualificationModel) Delete(ctx context.Context, qualificationId int64) error {
	userQualificationQualificationIdKey := fmt.Sprintf("%s%v", cacheUserQualificationQualificationIdPrefix, qualificationId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `qualification_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, qualificationId)
	}, userQualificationQualificationIdKey)
	return err
}

func (m *defaultUserQualificationModel) FindOne(ctx context.Context, qualificationId int64) (*UserQualification, error) {
	userQualificationQualificationIdKey := fmt.Sprintf("%s%v", cacheUserQualificationQualificationIdPrefix, qualificationId)
	var resp UserQualification
	err := m.QueryRowCtx(ctx, &resp, userQualificationQualificationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `qualification_id` = ? limit 1", userQualificationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, qualificationId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserQualificationModel) Insert(ctx context.Context, data *UserQualification) (sql.Result, error) {
	userQualificationQualificationIdKey := fmt.Sprintf("%s%v", cacheUserQualificationQualificationIdPrefix, data.QualificationId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userQualificationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Name, data.IdNumber, data.Industry, data.Company, data.Position, data.AddInfo, data.IdCardFront, data.IdCardBack, data.IdCardHandheld, data.QualificationImg)
	}, userQualificationQualificationIdKey)
	return ret, err
}

func (m *defaultUserQualificationModel) Update(ctx context.Context, data *UserQualification) error {
	userQualificationQualificationIdKey := fmt.Sprintf("%s%v", cacheUserQualificationQualificationIdPrefix, data.QualificationId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `qualification_id` = ?", m.table, userQualificationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Name, data.IdNumber, data.Industry, data.Company, data.Position, data.AddInfo, data.IdCardFront, data.IdCardBack, data.IdCardHandheld, data.QualificationImg, data.QualificationId)
	}, userQualificationQualificationIdKey)
	return err
}

func (m *defaultUserQualificationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserQualificationQualificationIdPrefix, primary)
}

func (m *defaultUserQualificationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `qualification_id` = ? limit 1", userQualificationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserQualificationModel) tableName() string {
	return m.table
}
