// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLegalizeLogFieldNames          = builder.RawFieldNames(&UserLegalizeLog{})
	userLegalizeLogRows                = strings.Join(userLegalizeLogFieldNames, ",")
	userLegalizeLogRowsExpectAutoSet   = strings.Join(stringx.Remove(userLegalizeLogFieldNames, "`legalize_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLegalizeLogRowsWithPlaceHolder = strings.Join(stringx.Remove(userLegalizeLogFieldNames, "`legalize_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserLegalizeLogLegalizeIdPrefix = "cache:userLegalizeLog:legalizeId:"
)

type (
	userLegalizeLogModel interface {
		Insert(ctx context.Context, data *UserLegalizeLog) (sql.Result, error)
		FindOne(ctx context.Context, legalizeId int64) (*UserLegalizeLog, error)
		Update(ctx context.Context, data *UserLegalizeLog) error
		Delete(ctx context.Context, legalizeId int64) error
	}

	defaultUserLegalizeLogModel struct {
		sqlc.CachedConn
		table string
	}

	UserLegalizeLog struct {
		LegalizeId      int64          `db:"legalize_id"`      // 认证申请ID
		UserId          int64          `db:"user_id"`          // 用户ID
		Type            int64          `db:"type"`             // 认证类型
		Status          int64          `db:"status"`           // 申请状态
		RejectReason    sql.NullString `db:"reject_reason"`    // 驳回原因
		QualificationId int64          `db:"qualification_id"` // 资质认证材料ID
		CreateTime      time.Time      `db:"create_time"`      // 创建时间
		UpdateTime      time.Time      `db:"update_time"`      // 更新时间
	}
)

func newUserLegalizeLogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserLegalizeLogModel {
	return &defaultUserLegalizeLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_legalize_log`",
	}
}

func (m *defaultUserLegalizeLogModel) Delete(ctx context.Context, legalizeId int64) error {
	userLegalizeLogLegalizeIdKey := fmt.Sprintf("%s%v", cacheUserLegalizeLogLegalizeIdPrefix, legalizeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `legalize_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, legalizeId)
	}, userLegalizeLogLegalizeIdKey)
	return err
}

func (m *defaultUserLegalizeLogModel) FindOne(ctx context.Context, legalizeId int64) (*UserLegalizeLog, error) {
	userLegalizeLogLegalizeIdKey := fmt.Sprintf("%s%v", cacheUserLegalizeLogLegalizeIdPrefix, legalizeId)
	var resp UserLegalizeLog
	err := m.QueryRowCtx(ctx, &resp, userLegalizeLogLegalizeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `legalize_id` = ? limit 1", userLegalizeLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, legalizeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLegalizeLogModel) Insert(ctx context.Context, data *UserLegalizeLog) (sql.Result, error) {
	userLegalizeLogLegalizeIdKey := fmt.Sprintf("%s%v", cacheUserLegalizeLogLegalizeIdPrefix, data.LegalizeId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userLegalizeLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Status, data.RejectReason, data.QualificationId)
	}, userLegalizeLogLegalizeIdKey)
	return ret, err
}

func (m *defaultUserLegalizeLogModel) Update(ctx context.Context, data *UserLegalizeLog) error {
	userLegalizeLogLegalizeIdKey := fmt.Sprintf("%s%v", cacheUserLegalizeLogLegalizeIdPrefix, data.LegalizeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `legalize_id` = ?", m.table, userLegalizeLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Type, data.Status, data.RejectReason, data.QualificationId, data.LegalizeId)
	}, userLegalizeLogLegalizeIdKey)
	return err
}

func (m *defaultUserLegalizeLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserLegalizeLogLegalizeIdPrefix, primary)
}

func (m *defaultUserLegalizeLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `legalize_id` = ? limit 1", userLegalizeLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLegalizeLogModel) tableName() string {
	return m.table
}
